name: PR Workflow - Linter and Unit tests
on:
  push:
    branches:
    - '*'
    - '!main'
jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: db_test
        ports:
        - 5432/tcp
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: cd backend && poetry install --no-interaction --no-root
    - name: Install project
      run: poetry install --no-interaction
    - name: Lint with Ruff
      run: |
        pip install ruff
        ruff --format=github --target-version=py312 .
      continue-on-error: true
    - name: Test with pytest
      run: |
        DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/db_test coverage run -m pytest  -v -s
    - name: Generate Coverage Report
      run: |
        coverage report -m
